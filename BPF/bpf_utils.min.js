// BPF JavaScript library version 0.9
// (c) Nick Polyak 2012 - http://awebpros.com/
// License: Code Project Open License (CPOL) 1.92(http://www.codeproject.com/info/cpol10.aspx)
//
// short overview of copyright rules:
// 1. you can use this framework in any commercial or non-commercial 
//    product as long as you retain this copyright message
// 2. Do not blame the author(s) of this software if something goes wrong. 
// 
// Also as a courtesy, please, mention this software in any documentation for the 
// products that use it.

"use strict"; function SimpleEvent() { this.eventHandlers = [] } var bpf = bpf || {}, isObjectArray; bpf.utils = bpf.utils || {}, bpf.utils.EventBarrier = function () { var r = new SimpleEvent, u = {}, n = 0, i = !0, t = 0; this.getNumberEvents = function () { return t }, this.addSimpleEventHandler = function (n) { r.addSimpleEventHandler(n) }, this.addCallback = function (f, e) { var s = this, o; n++, o = { id: n, event: f }, e && (o.name = e), u[n] = o, t++, f.addSimpleEventHandler(function (f) { delete u[n], t--, i = i && f, t === 0 && r.fire(s, i) }) }, this.createChildEventBarrier = function (n) { var t = new bpf.utils.EventBarrier, i = new SimpleEvent; return this.addCallback(i, n), t.addSimpleEventHandler(function () { i.fire() }), t } }, bpf = bpf || {}, bpf.utils = bpf.utils || {}, bpf.utils.segmentSeparationCharacter = ".", bpf.utils.stripFirstPound = function (n) { return n ? n.charAt(0) === "#" ? n.slice(1) : n : n }, bpf.utils.stripTrailingDot = function (n) { return n ? n.charAt(n.length - 1) === "#" ? n.slice(n.length - 1) : n : n }, bpf.utils.fillBlanks = function (n) { return n ? n.replace(/\s+/g, "-") : n }, bpf = bpf || {}, bpf.utils = bpf.utils || {}, bpf.utils.Iterator = function (n) { var t = this, i = 0; t.current = function () { return n[i] }, t.isCurrentValid = function () { return n ? isObjectArray(n) ? i < n.length ? !0 : !1 : !1 : !1 }, t.moveToNext = function () { i++ }, t.getCurrentIdx = function () { return i } }, isObjectArray = function (n) { return Object.prototype.toString.call(n) === "[object Array]" ? !0 : !1 }, Array.prototype.remove = function (n) { var t = 0; do this[t] === n ? this.splice(t, 1) : t++; while (t < this.length) }, Array.prototype.addArray = function (n) { for (var t = 0; t < n.length; t++) this.push(n[t]) }, Array.prototype.insert = function (n, t) { this.splice(n, 0, t) }, Array.prototype.firstIndexOf = function (n) { var t = 0; do { if (this[t] === n) return t; t++ } while (t < this.length) }, Array.prototype.lastIndexOf = function (n) { var t = this.length - 1; do { if (this[t] === n) return t; t-- } while (t >= 0) }, Array.prototype.clear = function () { this.length = 0 }, Array.prototype.copy = function (n, t) { var i, u, r; for (n || (n = 0), t ? (i = n + t, i > this.length && (i = this.length)) : i = this.length, u = [], r = n; r < i; r++) u.push(this[r]); return u }, $.ui.setSpinner = function (n) { var t = $(n).spinner({ min: 0, max: 1e3 }); $(t).spinner().bind("spinstop", function () { $(this).spinner().trigger("change") }) }, $.fn.outerHTMLForSimpleJQObj = function () { var n = $(this), t; return "outerHTML" in n[0] ? n[0].outerHTML : (t = n.wrap("<div><\/div>").parent().html(), n.unwrap(), t) }, $.fn.outerHTML = function () { for (var i = $(this), r = "", t, n = 0; n < i.length; n++) t = i[n], r += t instanceof Text ? t.data : $(t).outerHTMLForSimpleJQObj(); return r }, bpf = bpf || {}, bpf.utils = bpf.utils || {}, bpf.utils.extendObj = function (n) { var i = function (n) { var i = {}, t; for (t in n) i[t] = n[t]; return i }, r = function (n) { var r = {}, t, i; for (t in n) (i = n[t], typeof i != "function") && (r[t] = i); return r }, t = i(n); return t.cloneObj = function () { return i(t) }, t.unextendObj = function () { return r(t) }, t.removeKey = function (n) { delete t[n] }, t.containsKey = function (n) { return t.hasOwnProperty(n) }, t.printKeys = function () { for (var n in t) console.log(n + " ") }, t }, bpf = bpf || {}, bpf.utils = bpf.utils || {}, bpf.utils.OrderedMap = function () { var n = this, t = {}, i = []; n.add = function (n, r) { i.push(n), t[n] = r }, n.objByKey = function (n) { return t[n] }, n.getIterator = function () { var t = new bpf.utils.Iterator(i); return t.currentKey = function () { return i[t.getCurrentIdx()] }, t.current = function () { var i = t.currentKey(); return n.objByKey(i) }, t }, n.getMapClone = function () { return bpf.utils.extendObj(t) } }, SimpleEvent.prototype = { addSimpleEventHandler: function (n) { this.eventHandlers.push(n) }, removeSimpleEventHandler: function (n) { this.eventhandlers.remove(n) }, clearSimpleEventHandlers: function () { this.eventHandlers.clear() }, setSimpleEventHandler: function (n) { this.clearEventHandlers(), this.eventHandlers.addEventHandler(n) }, fire: function (n) { var i, n, r, t; for (arguments.length > 0 && (n = arguments[0]), r = Array.prototype.copy.call(arguments, 1), t = 0; t < this.eventHandlers.length; t++) i = this.eventHandlers[t].apply(n, r); return i } }, String.prototype.startsWith = function (n) { if (n.length > this.length) return !1; var t = this.substr(0, n.length); return t === n ? !0 : !1 }, String.prototype.removePrefix = function (n) { return this.startsWith(n) ? this.substr(n.length, this.length - n.length) : this }, String.prototype.getStrUpTo = function (n, t) { var i = this.length, r, o = [], u, e, f, s, h; for (isObjectArray(n) ? o = n : o.push(n), u = 0; u < n.length; u++) (e = n[u], f = this.indexOf(e), f < 0) || f <= i && (i = f, r = e); return s = this.substr(0, i), r && (i += r.length), t && (h = this.substr(i, this.length - i), t(r, h)), s }, String.prototype.getStrBetween = function (n, t, i, r) { var u, f, e, o; if (i || (i = 0), u = this.indexOf(n, i), u < 0) { r && r(-1); return } return u += n.length, f = this.indexOf(t, u + 1), f < 0 && (f = s.length), e = f + 1, o = this.substr(u, f - u), r && r(e), o }
//@ sourceMappingURL=bpf_utils.min.js.map