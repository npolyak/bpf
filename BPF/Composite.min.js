// BPF JavaScript library version 0.9
// (c) Nick Polyak 2012 - http://awebpros.com/
// License: Code Project Open License (CPOL) 1.92(http://www.codeproject.com/info/cpol10.aspx)
//
// short overview of copyright rules:
// 1. you can use this framework in any commercial or non-commercial 
//    product as long as you retain this copyright message
// 2. Do not blame the author(s) of this software if something goes wrong. 
// 
// Also as a courtesy, please, mention this software in any documentation for the 
// products that use it.

var bpf = bpf || {}, getCallableControl; bpf.cmpst = bpf.cmpst || {}, bpf.cmpst.pluginCache = { cache: {}, getPlugin: function (n) { return bpf.cmpst.pluginCache.cache[n] }, addPlugin: function (n, t) { bpf.cmpst.pluginCache.cache[n] = t }, hasPlugin: function (n) { var t = bpf.cmpst.pluginCache.cache[n]; return t ? !0 : !1 } }, bpf.cmpst.rootPluginInfo = {}; var replaceChildren = function (n, t) { return n.contents().remove(), n.append(t), n }, getScriptTextFromHTML = function (n) { var i = n.filter("script[data-type='script-interface']"), t; if (i && i.length !== 0) return (t = i[0], !t) ? void 0 : t.text || t.textContent || t.innerHTML }, hasCodeBehindInASeparateFile = function (n) { var t = n.filter("script[data-has-external-code-behind='true']"); return t.length ? !0 : !1 }, downloadPluginAndAddToCache = function (n, t) { $.ajax({ url: n, async: !0, success: function (i) { var r = {}, o; r.downloadedHtmlContainer = function () { var n, t; return { getDownloadedHtml: function () { return n }, setDownloadedHtml: function (i) { n = i, t = $(n) }, getDownloadedHtmlDOM: function () { return t }, setDownloadedHtmlDOM: function (i) { t = i, n = t.outerHTML() } } } (), r.downloadedHtmlContainer.setDownloadedHtml(i); var u = r.downloadedHtmlContainer.getDownloadedHtmlDOM(), f = function (scriptText) { r.codeBehind = eval(scriptText), bpf.cmpst.pluginCache.addPlugin(n, r), t.fire(r) }, e = getScriptTextFromHTML(u), s = hasCodeBehindInASeparateFile(u); if (u = u.not("script"), r.downloadedHtmlContainer.setDownloadedHtmlDOM(u), e) { f(e); return } if (s) { o = n + ".js", $.getScript(o, function (n) { f(n); return }); return } f() } }) }, processAndInsertPluginFromCacheImpl = function (n, t, i, r, u, f, e) { var s = bpf.cmpst.pluginCache.getPlugin(i), o = s.codeBehind, h, c, l; o && o.preRender && o.preRender.call(s.downloadedHtmlContainer, e); var a = s.downloadedHtmlContainer.getDownloadedHtml(), y = s.downloadedHtmlContainer.getDownloadedHtmlDOM(), v = a; n || (n = bpf.cmpst.rootPluginInfo), h = n.currentDOM, c = h ? h.find(t) : $(t), replaceChildren(c, v), o && (n.pluginMap || (n.pluginMap = {}), l = { currentDOM: c, codeBehind: o, postRenderArguments: f }, n.pluginMap[t] = l, o.postRender && o.postRender.call(l, u)), r.fire(null, !0) }; bpf.cmpst.getPlugin = function (n, t, i, r, u, f) { var s = new SimpleEvent, e, o; if (r.addCallback(s, n), e = function () { processAndInsertPluginFromCacheImpl(t, i, n, s, r, u, f) }, bpf.cmpst.pluginCache.hasPlugin()) { e(); return } o = new SimpleEvent, o.addSimpleEventHandler(function () { e() }), downloadPluginAndAddToCache(n, o) }, getCallableControl = function (n) { return { currentDOMPluginInfo: n, call: function (t) { var i = Array.prototype.copy.call(arguments, 1); n.codeBehind[t].apply(n, i) } } }, bpf.control = function (n, t) { t || (t = bpf.cmpst.rootPluginInfo); var i = t.pluginMap[n]; return getCallableControl(i) }
//@ sourceMappingURL=Composite.min.js.map